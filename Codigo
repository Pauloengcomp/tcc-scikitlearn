!pip install pysus
from pysus.online_data import SIM
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, f1_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Download dos dados
arquivos = SIM.download(groups=["cid10"], states='BA', years=2023)
df = arquivos.to_dataframe()
df_model = df.copy()

# 2. Conversão da idade
df_model['IDADE'] = pd.to_numeric(df_model['IDADE'], errors='coerce')

# 3. Criar faixa etária
def faixa_etaria(idade):
    if idade <= 1:
        return 'Bebê'
    elif idade <= 14:
        return 'Criança'
    elif idade <= 49:
        return 'Adulto Jovem'
    elif idade <= 64:
        return 'Meia-Idade'
    else:
        return 'Idoso'

df_model['FAIXA_ETARIA'] = df_model['IDADE'].apply(faixa_etaria)

# 4. Checar e tratar ausentes
print("Valores ausentes por coluna:")
print(df_model[['IDADE', 'SEXO', 'RACACOR', 'ESC', 'LOCOCOR']].isnull().sum())

if df_model['IDADE'].isnull().sum() > 0:
    df_model['IDADE'].fillna(df_model['IDADE'].median(), inplace=True)

for col in ['SEXO', 'RACACOR', 'ESC', 'LOCOCOR']:
    if df_model[col].isnull().sum() > 0:
        df_model[col].fillna(df_model[col].mode()[0], inplace=True)

# 5. Agrupamento da variável alvo em supergrupos
df_model['CAPITULO_CID'] = df_model['CAUSABAS'].str[0]

def agrupar_supergrupo(codigo):
    if codigo in ['A', 'B']:
        return 'Doenças Infecciosas'
    elif codigo in ['C', 'D']:
        return 'Neoplasias'
    elif codigo in ['I', 'J', 'K']:
        return 'Doenças Crônicas'
    elif codigo in ['R', 'X', 'Y']:
        return 'Causas Externas'
    else:
        return 'Outros'

df_model['GRUPO_CLINICO'] = df_model['CAPITULO_CID'].apply(agrupar_supergrupo)

# 6. Seleção de variáveis
X = df_model[['IDADE', 'SEXO', 'RACACOR', 'ESC', 'LOCOCOR', 'FAIXA_ETARIA']]
y = df_model['GRUPO_CLINICO']

# 7. Codificação
le = LabelEncoder()
for col in ['SEXO', 'RACACOR', 'ESC', 'LOCOCOR', 'FAIXA_ETARIA']:
    X[col] = le.fit_transform(X[col].astype(str))

# 8. Divisão treino/teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 9. Modelo com Decision Tree
print("\n=== Decision Tree ===")
modelo_dt = DecisionTreeClassifier(
    max_depth=10,
    min_samples_split=10,
    min_samples_leaf=5,
    class_weight='balanced',
    random_state=42
)

modelo_dt.fit(X_train, y_train)
y_pred_dt = modelo_dt.predict(X_test)

acc_dt = accuracy_score(y_test, y_pred_dt)
f1_dt = f1_score(y_test, y_pred_dt, average='macro')

print(f"Acurácia: {acc_dt:.2f}")
print(f"F1 Macro: {f1_dt:.2f}")
print("Relatório de Classificação:")
print(classification_report(y_test, y_pred_dt))

# Matriz de confusão - Decision Tree
cm_dt = pd.crosstab(y_test, y_pred_dt, rownames=['Classe Real'], colnames=['Classe Predita'])
plt.figure(figsize=(8, 6))
sns.heatmap(cm_dt, annot=True, fmt='d', cmap='Greens')
plt.title(f'Decision Tree - Matriz de Confusão (Acurácia: {acc_dt:.2f})')
plt.xlabel('Classe Predita')
plt.ylabel('Classe Real')
plt.tight_layout()
plt.show()

# 10. Modelo com Random Forest
print("\n=== Random Forest ===")
modelo_rf = RandomForestClassifier(
    n_estimators=100,
    max_depth=10,
    class_weight='balanced',
    random_state=42,
    n_jobs=-1
)

modelo_rf.fit(X_train, y_train)
y_pred_rf = modelo_rf.predict(X_test)

acc_rf = accuracy_score(y_test, y_pred_rf)
f1_rf = f1_score(y_test, y_pred_rf, average='macro')

print(f"Acurácia: {acc_rf:.2f}")
print(f"F1 Macro: {f1_rf:.2f}")
print("Relatório de Classificação:")
print(classification_report(y_test, y_pred_rf))

# Matriz de confusão - Random Forest
cm_rf = pd.crosstab(y_test, y_pred_rf, rownames=['Classe Real'], colnames=['Classe Predita'])
plt.figure(figsize=(8, 6))
sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Blues')
plt.title(f'Random Forest - Matriz de Confusão (Acurácia: {acc_rf:.2f})')
plt.xlabel('Classe Predita')
plt.ylabel('Classe Real')
plt.tight_layout()
plt.show()

# 11. Avaliação
y_pred = modelo.predict(X_test)

acc = accuracy_score(y_test, y_pred)
f1_macro = f1_score(y_test, y_pred, average='macro')

print(f"Acurácia: {acc:.2f}")
print(f"F1 Macro: {f1_macro:.2f}")
print("Relatório de Classificação:")
print(classification_report(y_test, y_pred))
